service: kinesis-playground # NOTE: update this with your service name

provider:
  name: aws
  runtime: nodejs6.10
  memorySize: 128
  stage: ${opt:stage, self:custom.defaultStage}
  iamRoleStatements: 
      - Effect: Allow
        Action:
          - dynamodb:*
        Resource: "arn:aws:dynamodb:#{AWS::Region}:*:table/${self:custom.pre}-*"
      - Effect: Allow
        Action:
          - lambda:*
        Resource: "arn:aws:lambda:#{AWS::Region}:*:function:${self:custom.pre}-*"
      - Effect: Allow
        Action:
          - states:*
        Resource: "arn:aws:states:#{AWS::Region}:*:stateMachine:*"        
      - Effect: Allow
        Action:
          - SNS:*
        Resource: "arn:aws:sns:#{AWS::Region}:*:${self:custom.pre}-*"
      - Effect: Allow
        Action:
          - kinesis:*
        Resource: "arn:aws:kinesis:#{AWS::Region}:*:stream/${self:custom.pre}-*"  

plugins:
  - serverless-webpack
  - serverless-pseudo-parameters  

custom:
  defaultStage: dev  
  pre: ${self:service}-${self:provider.stage}
  eventsStreamName: ${self:service}-${self:provider.stage}-events

functions:
  put:  
    handler: handler.put
    events:
      - http:
          path: stream/put
          method: post
    environment:
      EVENTS_STREAM_NAME: ${self:custom.eventsStreamName}
      EVENTS_STREAM_ARN:
        Fn::GetAtt:
          - eventStream
          - Arn        

  processStreamEvent:
    handler: handler.processStreamEvent
    events:
      - stream:
          type: kinesis
          arn:
            Fn::GetAtt:
              - eventStream
              - Arn      

  processStreamEvent2:
    handler: handler.processStreamEvent2
    events:
      - stream:
          type: kinesis
          arn:
            Fn::GetAtt:
              - eventStream
              - Arn      


resources:
  Resources:
    eventStream:
      Type: AWS::Kinesis::Stream
      Properties:
        Name: ${self:custom.eventsStreamName}
        ShardCount: 1